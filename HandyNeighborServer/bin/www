#!/usr/bin/env node
require('dotenv').config();

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('handyneighborserver:server');
const http = require('http');
const pool = require('../config/db');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, '0.0.0.0', () => {
  console.log(`Server running at http://localhost:${port}`);
  console.log('To access from other devices on your network, use:');
  const interfaces = require('os').networkInterfaces();
  for (const name of Object.keys(interfaces)) {
    for (const iface of interfaces[name]) {
      // Skip over non-IPv4 and internal (loopback) addresses
      if (iface.family === 'IPv4' && !iface.internal) {
        console.log(`  http://${iface.address}:${port}`);
      }
    }
  }
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

async function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);

  // test database connection
  try {
    await pool.query('SELECT NOW()');
    console.log('\x1b[32m%s\x1b[0m', '‚úì Database connection successful');
  } catch (err) {
    console.log('\x1b[31m%s\x1b[0m', '‚úó Database connection failed:', err.message);
  }

  // print server info
  console.log('\n=== HandyNeighbor Server ===');
  console.log('\x1b[36m%s\x1b[0m', `‚ö° Server is running on ${bind}`);
  console.log('\x1b[36m%s\x1b[0m', `üìù Environment: ${process.env.NODE_ENV || 'development'}`);
  console.log('\x1b[36m%s\x1b[0m', `üîë JWT authentication enabled`);
  console.log('\x1b[36m%s\x1b[0m', `üåê API endpoints:`);
  console.log('   - POST /api/auth/register');
  console.log('   - POST /api/auth/login');
  console.log('   - GET  /api/tasks');
  console.log('   - POST /api/tasks');
  console.log('\n=== Ready for connections ===\n');
}
